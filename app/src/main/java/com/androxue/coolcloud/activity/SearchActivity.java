package com.androxue.coolcloud.activity;import android.app.Activity;import android.media.AudioManager;import android.media.MediaPlayer;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.KeyEvent;import android.view.View;import android.view.Window;import android.view.inputmethod.EditorInfo;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.androxue.coolcloud.R;import com.androxue.coolcloud.widget.DeletableEditText;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;/** * Created by JimCharles on 2017/3/11. */public class SearchActivity extends Activity {    MediaPlayer mMediaPlayer = null;    String mp3Url, result = "";    private Button fatherspoetry;    @Override    protected void onCreate(Bundle savedInstanceState){        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        setContentView(R.layout.activity_search);        ImageView back = (ImageView) findViewById(R.id.back);        back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        DeletableEditText search = (DeletableEditText) findViewById(R.id.search);        search.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                if (actionId == EditorInfo.IME_ACTION_SEARCH){                    //实现搜索操作                    try {                        sendHttpPostRequest();                    } catch (IOException e) {                        e.printStackTrace();                    }                }                return false;            }        });        EditText hotsearch = (EditText) findViewById(R.id.hot_search);        hotsearch.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                if (actionId == EditorInfo.IME_ACTION_SEARCH){                    //实现搜索操作                    try {                        sendHttpPostRequest();                    } catch (IOException e) {                        e.printStackTrace();                    }                }                return false;            }        });        EditText hotsearch_1 = (EditText) findViewById(R.id.hot_search_1);        hotsearch_1.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                if (actionId == EditorInfo.IME_ACTION_SEARCH){                    //实现搜索操作                    try {                        sendHttpPostRequest();                    } catch (IOException e) {                        e.printStackTrace();                    }                }                return false;            }        });        search.setOnKeyListener(new View.OnKeyListener() {//修改回车键功能            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_DOWN) {                    search();                }                return false;            }        });        fatherspoetry = (Button) findViewById(R.id.father);        fatherspoetry.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                search();            }        });    }    public boolean sendHttpPostRequest() throws IOException {        HttpURLConnection connection = null;        try{            String httpUrl = "http://music.163.com/api/search/pc/";            URL url = new URL(httpUrl);            connection = (HttpURLConnection) url.openConnection();            //设置http请求方法            connection.setDoOutput(true);            connection.setDoInput(true);            connection.setRequestMethod("POST");//设置请求方式为post            connection.setReadTimeout(5000);//设置读取超时为5秒            connection.setConnectTimeout(10000);//设置连接超时为10秒            //设置请求头，包括Cookie、refer、Charset            connection.setRequestProperty("os", "pc");            connection.setRequestProperty("MUSIC_U", "5339640232");            connection.setRequestProperty("Charset", "utf-8");            //进行连接            connection.connect();            DataOutputStream out = new DataOutputStream(connection.getOutputStream());            //请求参数            String data = "&s=" + URLEncoder.encode("刚好遇见你", "UTF-8")+ "&limit=" + URLEncoder.encode("1", "UTF-8")+ "&type="                    + URLEncoder.encode("1", "UTF-8") + "&offset" + URLEncoder.encode("0", "UTF-8") + "&total=" + URLEncoder.encode("true", "UTF-8");            //通过EdirText获取输入内容进行搜索；因为手机屏幕原因，将搜索返回数目控制为10条；搜索形式为单曲搜索；偏移量设置为0，即不进行偏移            //获取输出流            out.writeBytes(data);            out.flush();            out.close();            //获取响应输入流对象            if (connection.getResponseCode() == 200) {                InputStreamReader is = new InputStreamReader(connection.getInputStream());                BufferedReader bufferedReader = new BufferedReader(is);                StringBuilder strBuffer = new StringBuilder();                String line;                //读取服务器返回信息                while ((line = bufferedReader.readLine()) != null){                    strBuffer.append(line);                }                result = strBuffer.toString();                bufferedReader.close();                is.close();            }        }catch (IOException e) {            return true;        } finally {            if (connection != null) {                connection.disconnect();            }        }        return false;    }    public void play() {        mMediaPlayer = MediaPlayer.create(this, Uri.parse(mp3Url));        mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);        // 通过异步的方式装载媒体资源,避免UI卡顿        mMediaPlayer.prepareAsync();        mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {            @Override            public void onPrepared(MediaPlayer mp) {                mMediaPlayer.start();            }        });    }    public void playMusic() {        mMediaPlayer = MediaPlayer.create(this,Uri.parse(mp3Url));        mMediaPlayer.start();    }    public void parseJson(String json) throws JSONException {        JSONObject jsonObject = new JSONObject(json);        JSONObject result = jsonObject.getJSONObject("result");        JSONArray jsonArray = result.getJSONArray("songs");        for (int i = 0; i < jsonArray.length(); i++) {            JSONObject jsonObject1 = jsonArray.getJSONObject(i);            mp3Url = jsonObject1.getString("mp3Url");        }    }    private void search() {        fatherspoetry.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final Handler handler = new Handler() {                    @Override                    public void handleMessage(Message msg) {                        try {                            parseJson(result);                            playMusic();                        } catch (JSONException e) {                            e.printStackTrace();                        }                        if (msg.what == 1) {                            //提示读取结果                            Toast.makeText(SearchActivity.this, result, Toast.LENGTH_SHORT).show();                        }                    }                };                new Thread() {                    public void run() {                        //请求网络                        try {                            sendHttpPostRequest();                        } catch (IOException e) {                            e.printStackTrace();                        }                        Message m = new Message();                        m.what = 1;                        // 发送消息到Handler                        handler.sendMessage(m);                    }                }.start();            }        });    }    protected void onDestroy(){        if (mMediaPlayer != null && mMediaPlayer.isPlaying()) {            mMediaPlayer.stop();            mMediaPlayer.release();            mMediaPlayer = null;        }        super.onDestroy();    }}