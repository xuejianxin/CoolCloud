package com.androxue.coolcloud.activity;import android.app.Activity;import android.media.MediaPlayer;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.KeyEvent;import android.view.View;import android.view.Window;import android.view.inputmethod.EditorInfo;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.androxue.coolcloud.R;import com.androxue.coolcloud.widget.DeletableEditText;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;/** * Created by JimCharles on 2017/3/11. */public class SearchActivity extends Activity {    MediaPlayer mMediaPlayer = null;    String request, mp3Url, result = "";    private Button fatherspoetry, shapeOfYou, somethingJustLikeThis, baby, meetYou, xuezhiqian, chenyixun, zhoujielun;    private DeletableEditText search;    @Override    protected void onCreate(Bundle savedInstanceState){        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        setContentView(R.layout.activity_search);        ImageView back = (ImageView) findViewById(R.id.back);        back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        search = (DeletableEditText) findViewById(R.id.search);        search.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                if (actionId == EditorInfo.IME_ACTION_SEARCH){                    //实现搜索操作                    request = search.getText().toString();                    search.setText(search.getText().toString().trim());//显示搜索信息到搜索框                    search.setSelection(search.getText().toString().trim().length());//修改光标位置到EditText最后面                    search();                }                return false;            }        });        search.setOnKeyListener(new View.OnKeyListener() {//修改回车键功能            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_DOWN) {                    request = search.getText().toString();                    search.setText(search.getText().toString().trim());                    search.setSelection(search.getText().toString().trim().length());                    search();                }                return false;            }        });        final DeletableEditText hotsearch = (DeletableEditText) findViewById(R.id.hot_search);        hotsearch.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = hotsearch.getHint().toString();                search.setText(hotsearch.getHint().toString().trim());//显示搜索信息到搜索框                search.setSelection(hotsearch.getHint().toString().trim().length());//修改光标位置到EditText最后面                search();            }        });        final DeletableEditText hotsearch_1 = (DeletableEditText) findViewById(R.id.hot_search_1);        hotsearch.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = hotsearch_1.getHint().toString();                search.setText(hotsearch_1.getHint().toString().trim());                search.setSelection(hotsearch_1.getHint().toString().trim().length());                search();            }        });        fatherspoetry = (Button) findViewById(R.id.father);        fatherspoetry.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = fatherspoetry.getText().toString();                search.setText(fatherspoetry.getText().toString().trim());                search.setSelection(fatherspoetry.getText().toString().trim().length());                search();            }        });        shapeOfYou = (Button) findViewById(R.id.shape);        shapeOfYou.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = shapeOfYou.getText().toString();                search.setText(shapeOfYou.getText().toString().trim());                search.setSelection(shapeOfYou.getText().toString().trim().length());                search();            }        });        somethingJustLikeThis = (Button) findViewById(R.id.something);        somethingJustLikeThis.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = somethingJustLikeThis.getText().toString();                search.setText(somethingJustLikeThis.getText().toString().trim());                search.setSelection(somethingJustLikeThis.getText().toString().trim().length());                search();            }        });        baby = (Button) findViewById(R.id.baby);        baby.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = baby.getText().toString();                search.setText(baby.getText().toString().trim());                search.setSelection(baby.getText().toString().trim().length());                search();            }        });        meetYou = (Button) findViewById(R.id.met_you);        meetYou.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = meetYou.getText().toString();                search.setText(meetYou.getText().toString().trim());                search.setSelection(meetYou.getText().toString().trim().length());                search();            }        });        xuezhiqian = (Button) findViewById(R.id.xue_zhi_qian);        xuezhiqian.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = xuezhiqian.getText().toString();                search.setText(xuezhiqian.getText().toString().trim());                search.setSelection(xuezhiqian.getText().toString().trim().length());                search();            }        });        chenyixun = (Button) findViewById(R.id.chen_yi_xun);        chenyixun.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = chenyixun.getText().toString();                search.setText(chenyixun.getText().toString().trim());                search.setSelection(chenyixun.getText().toString().trim().length());                search();            }        });        zhoujielun = (Button) findViewById(R.id.zhou_jie_lun);        zhoujielun.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                request = zhoujielun.getText().toString();                search.setText(zhoujielun.getText().toString().trim());                search.setSelection(zhoujielun.getText().toString().trim().length());                search();            }        });    }    protected boolean sendHttpPostRequest(String request) throws IOException {        HttpURLConnection connection = null;        try{            String httpUrl = "http://music.163.com/api/search/pc/";            URL url = new URL(httpUrl);            connection = (HttpURLConnection) url.openConnection();            //设置http请求方法            connection.setDoOutput(true);            connection.setDoInput(true);            connection.setRequestMethod("POST");//设置请求方式为post            connection.setReadTimeout(5000);//设置读取超时为5秒            connection.setConnectTimeout(10000);//设置连接超时为10秒            //设置请求头，包括Cookie、refer、Charset            connection.setRequestProperty("os", "pc");            connection.setRequestProperty("MUSIC_U", "5339640232");            connection.setRequestProperty("Charset", "utf-8");            //进行连接            connection.connect();            DataOutputStream out = new DataOutputStream(connection.getOutputStream());            //请求参数            String data = "&s=" + URLEncoder.encode(request, "UTF-8")+ "&limit=" + URLEncoder.encode("1", "UTF-8")+ "&type="                    + URLEncoder.encode("1", "UTF-8") + "&offset" + URLEncoder.encode("0", "UTF-8") + "&total=" + URLEncoder.encode("true", "UTF-8");            //通过EdirText获取输入内容进行搜索；因为手机屏幕原因，将搜索返回数目控制为10条；搜索形式为单曲搜索；偏移量设置为0，即不进行偏移            //获取输出流            out.writeBytes(data);            out.flush();            out.close();            //获取响应输入流对象            if (connection.getResponseCode() == 200) {                InputStreamReader is = new InputStreamReader(connection.getInputStream());                BufferedReader bufferedReader = new BufferedReader(is);                StringBuilder strBuffer = new StringBuilder();                String line;                //读取服务器返回信息                while ((line = bufferedReader.readLine()) != null){                    strBuffer.append(line);                }                result = strBuffer.toString();                bufferedReader.close();                is.close();            }        }catch (IOException e) {            return true;        } finally {            if (connection != null) {                connection.disconnect();            }        }        return false;    }    protected void playMusic() {        mMediaPlayer = MediaPlayer.create(this,Uri.parse(mp3Url));        mMediaPlayer.start();    }    protected void parseJson(String json) throws JSONException {        JSONObject jsonObject = new JSONObject(json);        JSONObject result = jsonObject.getJSONObject("result");        JSONArray jsonArray = result.getJSONArray("songs");        for (int i = 0; i < jsonArray.length(); i++) {            JSONObject jsonObject1 = jsonArray.getJSONObject(i);            mp3Url = jsonObject1.getString("mp3Url");        }    }    protected void search() {        final Handler handler = new Handler() {            @Override            public void handleMessage(Message msg) {                try {                    parseJson(result);                    playMusic();                } catch (JSONException e) {                    e.printStackTrace();                }                if (msg.what == 1) {                    //提示读取结果                    Toast.makeText(SearchActivity.this, result, Toast.LENGTH_SHORT).show();                }            }        };        new Thread() {            public void run() {                //请求网络                try {                    sendHttpPostRequest(request);                } catch (IOException e) {                    e.printStackTrace();                }                Message m = new Message();                m.what = 1;                // 发送消息到Handler                handler.sendMessage(m);            }        }.start();    }    protected void onDestroy(){//退出Activity，即Activity销毁时执行        if (mMediaPlayer != null && mMediaPlayer.isPlaying()) {            mMediaPlayer.stop();            mMediaPlayer.release();            mMediaPlayer = null;        }        super.onDestroy();    }}